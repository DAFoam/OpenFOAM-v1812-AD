#!/bin/bash
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2011-2016 OpenFOAM Foundation
#    \\/     M anipulation  | Copyright (C) 2017-2018 OpenCFD Ltd.
#-------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     wmake
#
# Description
#     General, easy to use make system for multi-platform development
#     with support for local and network parallel compilation.
#
#     This updated wmake supports out-of-tree object and dependency files to
#     avoid the clutter which accumulates in the source-tree with the original
#     wmake system.  Now when building the OpenFOAM package both the object and
#     dependency files are now located in a tree with the same structure as the
#     source tree but in the platforms/$WM_OPTIONS sub-directory of
#     $WM_PROJECT_DIR.
#
#     When building user libraries and applications which are not located in the
#     OpenFOAM source-tree the object and dependency files are located in a tree
#     with the same structure as the source tree but in the Make/$WM_OPTIONS
#     sub-directory.
#
#     The disadvantage of the out-of-tree compilation is that the dependency
#     files are harder to find but are sometimes useful to study which header
#     files are included.  For those who need access to the dependency files the
#     new wdep script is provided to locate them.  See the wdep script header or
#     run:
#         wdep -h
#
# See also
#     wmakeLnInclude, wmakeLnIncludeAll, wmakeCollect, wdep, wrmdep, wrmo,
#     wclean, wcleanPlatform, wcleanLnIncludeAll
#
#------------------------------------------------------------------------------
Script="${0##*/}"           # Use 'Script' for error messages in wmakeFunctions
. "${0%/*}/scripts/wmakeFunctions"              # Source wmake functions

usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

Usage: $Script [OPTION] [dir]
       $Script [OPTION] target [dir [MakeDir]]

options:
  -s | -silent      Quiet mode (does not echo commands)
  -a | -all         wmake all sub-directories, running Allwmake if present
  -q | -queue       wmakeCollect all sub-directories, running Allwmake if present
  -k or -non-stop   Compile without stopping when errors occur
  -j                Compile using all local cores/hyperthreads
  -jN or -j N       Compile using N cores/hyperthreads
  -no-scheduler     Compile without wmakeScheduler
  -update           Update lnInclude directories, dep files, remove deprecated
                    files and directories
  -h | -help        Print the usage


A general, easy-to-use make system for multi-platform development
with support for local and network parallel compilation.

The 'target' is a Makefile target:
  e.g., platforms/linux64GccDPOpt/.../fvMesh.o

or a special target:
  all               wmake all sub-directories, running Allwmake if present
  queue             wmakeCollect all sub-directories, running Allwmake if present
  exe               Compile statically linked executable
  lib               Compile statically linked archive lib (.a)
  libo              Compile statically linked lib (.o)
  libso             Compile dynamically linked lib (.so)
  dep               Compile lnInclude and dependencies only
  updatedep         Compile dependencies only (in case of broken dependencies)
  objects           Compile but not link

USAGE
    exit 1
}

# Default make is the "make" in the path
make="make"


#------------------------------------------------------------------------------

# Set nCores to the number of cores on the machine
nCores=0
allCores()
{
    nCores=$(getconf _NPROCESSORS_ONLN 2>/dev/null) || nCores=1
    : ${nCores:=1}
}


#------------------------------------------------------------------------------
# Parse arguments and options
#------------------------------------------------------------------------------

# Default to compiling the local target only
unset all update

while [ "$#" -gt 0 ]
do
    case "$1" in
        # Print help
        -h | -help*)
            usage
            ;;
        -s | -silent)
            export WM_QUIET=true
            ;;
        -a | -all | all)
            all=all
            ;;
        -q | -queue | queue)
            all=queue
            ;;
        # Parallel compilation on all cores (or specified number of cores)
        -j)
            nCores=0
            test $# -ge 2 && expr $2 + 1 > /dev/null 2>&1 \
                && shift && nCores=$1

            [ "$nCores" = 0 ] && allCores
            export WM_NCOMPPROCS=$nCores
            echo "Compiling enabled on $WM_NCOMPPROCS cores"
            ;;
        # Parallel compilation on specified number of cores
        -j[1-9]*)
            export WM_NCOMPPROCS=${1#-j}
            echo "Compiling enabled on $WM_NCOMPPROCS cores"
            ;;
        # Non-stop compilation, ignoring errors
        -k | -non-stop)
            export WM_CONTINUE_ON_ERROR=true
            ;;
        # Disable scheduled parallel compilation
        -no-scheduler)
            unset WM_SCHEDULER
            ;;
        # Meant to be used following a pull, this will:
        # - remove dep files that depend on deleted files;
        # - remove stale dep files;
        # - update lnInclude directories;
        # - remove empty directories, along with deprecated object directories
        #   and respective binaries.
        -update)
            update=true
            : ${all:=all}  # implies 'all', unless previous set to 'queue' etc.
            ;;
        --)
            shift
            break
            ;;
        -*)
            usage "unknown option: '$1'"
            ;;
        *)
            break
            ;;
    esac
    shift
done


#------------------------------------------------------------------------------
# Check environment variables
#------------------------------------------------------------------------------

checkEnv

# When compiling anything but a standalone exe WM_PROJECT and WM_PROJECT_DIR
# must be set
[ "$1" = exe -o \( "$WM_PROJECT" -a "$WM_PROJECT_DIR" \) ] || {
    exec 1>&2
    echo "$Script error:"
    echo "    environment variable \$WM_PROJECT or \$WM_PROJECT_DIR not set"
    echo "    while building project library"
    exit 1
}


#------------------------------------------------------------------------------
# Setup parallel compilation
#------------------------------------------------------------------------------

# Set WM_NCOMPPROCS automatically when both WM_HOSTS and WM_SCHEDULER are set
if [ -z "$WM_NCOMPPROCS" -a -n "$WM_HOSTS" -a -n "$WM_SCHEDULER" ]
then
    WM_NCOMPPROCS=$(wmakeScheduler -count) || unset WM_NCOMPPROCS
fi

if [ -n "$WM_NCOMPPROCS" ]
then
    parOpt="-j $WM_NCOMPPROCS"

    if [ "$WM_NCOMPPROCS" -gt 1 -a -z "$MAKEFLAGS" ]
    then
        lockDir=$HOME/.$WM_PROJECT/.wmake

        if [ -d $lockDir ]
        then
            rm -f $lockDir/*
        else
            mkdir -p $lockDir
        fi

        make="$make --no-print-directory $parOpt"
    fi
fi


#------------------------------------------------------------------------------
# Check arguments and change to the directory in which to run wmake.
# The variables 'targetType' and 'MakeDir' are considered global
#------------------------------------------------------------------------------

unset targetType
MakeDir=Make

if [ $# -ge 1 ]
then
    unset dir
    if [ -d "$1" ]
    then
        dir="${1%/}"
    elif [ -f "$1" ]
    then
        dir="${1%/*}"
        : "${dir:=.}"
    else
        targetType="$1"
    fi

    # Specified directory name:
    [ $# -ge 2 ] && dir="${2%/}"

    # Specified alternative name for the Make sub-directory:
    [ $# -ge 3 ] && MakeDir="${3%/}"

    if [ -n "$dir" ]
    then
        cd $dir 2>/dev/null || {
            echo "$Script error: could not change to directory '$dir'" 1>&2
            exit 1
        }
    elif [ -f "$MakeDir/files" ]
    then
        dir="(${PWD##*/})"  # Implicit directory information
    fi

    # Print command
    echo "$Script $targetType${targetType:+ }$dir"
    unset dir
fi


#------------------------------------------------------------------------------
# Recurse the source tree to update all
#------------------------------------------------------------------------------

if [ "$update" = true ]
then
    wrmdep -update
    wrmdep -old
    wmakeLnIncludeAll -update $parOpt
    wclean empty
    export WM_UPDATE_DEPENDENCIES=yes
fi


#------------------------------------------------------------------------------
# Recurse the source tree to compile "all" targets
#------------------------------------------------------------------------------

if [ "$all" = all ]
then
    if [ -e Allwmake ]
    then
        ./Allwmake -fromWmake $targetType
        exit $?
    fi

    # Find all the sub-directories containing a 'Make' directory
    # (xargs is just used to flatten the list)
    FOAM_APPS=$(
        for d in *
        do [ -d "$d" -a "$d" != Optional -a "$d" != Make ] && echo "$d"
        done | xargs)

    if [ -n "$FOAM_APPS" ]
    then
        # Compile all applications in sub-directories
        $make ${WM_CONTINUE_ON_ERROR:+-k} \
              -f $WM_DIR/makefiles/apps \
              TARGET="$targetType" FOAM_APPS="$FOAM_APPS"
        makeExitCode=$?
    else
        makeExitCode=0 # For fall-through
    fi

    # Exit if current directory does not contains a 'Make' directory or
    # an error was previously encountered
    if [ ! -d "$MakeDir" -o $makeExitCode -ne 0 ]
    then
        exit $makeExitCode
    fi
fi


#------------------------------------------------------------------------------
# Recurse the source tree to compile "all" targets using wmakeCollect
#------------------------------------------------------------------------------

if [ "$all" = queue ]
then
    [ "$update" = true ] || wmakeLnIncludeAll $parOpt

    (
        export WM_COLLECT_DIR=$WM_PROJECT_DIR/build/${WM_OPTIONS}/${PWD////_}
        export WM_SCHEDULER=wmakeCollect
        trap '$WM_SCHEDULER -kill' TERM INT
        $WM_SCHEDULER -clean \
     && wmake -all objects   \
     && $WM_SCHEDULER
    ) && wmake -all
    exit $?
fi


#------------------------------------------------------------------------------
# Search up the directory tree for the Make sub-directory,
# check the existence of the 'files' file and build there if present
#------------------------------------------------------------------------------

cdSource


#------------------------------------------------------------------------------
# Transform options
#------------------------------------------------------------------------------

# Transform no option to "libso" if that looks appropriate or remove it
# so that the call to make builds the application
if [ -z "$targetType" ]
then
    if grep -qe '^ *LIB *=' "$MakeDir/files" 2>/dev/null
    then
        targetType=libso
    fi
elif grep -qe '^ *EXE *=' "$MakeDir/files" 2>/dev/null
then
    # Application. Remove any nonsense targetType
    case "$targetType" in
    lib*)
        unset targetType
        ;;
    esac
fi


#------------------------------------------------------------------------------
# Spawn a sub-shell and unset MAKEFLAGS in that sub-shell to avoid
# files and options being built in parallel
#------------------------------------------------------------------------------

objectsDir=$MakeDir/$WM_OPTIONS
case "$PWD" in
("$WM_PROJECT_DIR"/*)
    buildPath=$WM_PROJECT_DIR/build/${WM_OPTIONS}
    objectsDir=$buildPath$(echo $PWD | sed s%$WM_PROJECT_DIR%% )
    ;;
esac

(
    unset MAKEFLAGS
    mkdir -p $objectsDir

    # Pre-build the $WM_OPTIONS/options file
    # which is included when building the $WM_OPTIONS/files file
    $make -s -f $WM_DIR/makefiles/files MAKE_DIR=$MakeDir \
          OBJECTS_DIR=$objectsDir $objectsDir/options

    $make -s -f $WM_DIR/makefiles/files MAKE_DIR=$MakeDir \
          OBJECTS_DIR=$objectsDir
)


#------------------------------------------------------------------------------
# Check the $objectsDir/sourceFiles file was created successfully
#------------------------------------------------------------------------------

[ -r $objectsDir/sourceFiles ] || {
    echo "$Script error: file '$objectsDir/sourceFiles'" \
         "could not be created in $PWD" 1>&2
    exit 1
}


#------------------------------------------------------------------------------
# Make the dependency files
#------------------------------------------------------------------------------

# For libraries create lnInclude, but only if 'LIB' is declared in 'Make/files'
case "$targetType" in
(lib | libo | libso | dep)
    if grep -qe '^ *LIB *=' "$MakeDir/files" 2>/dev/null
    then
        $make -s -f $WM_DIR/makefiles/general MAKE_DIR=$MakeDir \
              OBJECTS_DIR=$objectsDir lnInclude
    fi
    ;;
esac


#------------------------------------------------------------------------------
# When WM_UPDATE_DEPENDENCIES is set, use forced dependency files update
#------------------------------------------------------------------------------

if [ -n "$WM_UPDATE_DEPENDENCIES" ]
then

    $make -f $WM_DIR/makefiles/general MAKE_DIR=$MakeDir \
        OBJECTS_DIR=$objectsDir updatedep
    makeExitCode=$?

    [ $makeExitCode -eq 0 ] || exit $makeExitCode
fi


#------------------------------------------------------------------------------
# Make the dependency files or object files and link
#------------------------------------------------------------------------------

exec $make -f $WM_DIR/makefiles/general MAKE_DIR=$MakeDir \
     OBJECTS_DIR=$objectsDir $targetType

exit 0 # clean exit

#------------------------------------------------------------------------------
