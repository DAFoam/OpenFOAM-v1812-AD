#!/bin/sh
#------------------------------------------------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2011-2016 OpenFOAM Foundation
#    \\/     M anipulation  | Copyright (C) 2017 OpenCFD Ltd.
#-------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     wclean
#
# Usage
#     wclean [OPTION] [dir]
#     wclean [OPTION] target [dir [MakeDir]]
#
# Description
#     Clean up the wmake control directory Make/\$WM_OPTIONS and remove the
#     lnInclude directories generated for libraries.
#
#------------------------------------------------------------------------------
Script=${0##*/}             # Use 'Script' for error messages in wmakeFunctions
. ${0%/*}/scripts/wmakeFunctions        # Source wmake functions

usage() {
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

Usage: $Script [OPTION] [dir]
       $Script [OPTION] target [dir [MakeDir]]

options:
  -a | -all         Same as the 'all' target
  -s | -silent      Ignored - for compatibility with wmake
  -help             Print the usage

Clean up the wmake control directory Make/\$WM_OPTIONS and remove the
lnInclude directories generated for libraries.

The targets correspond to a subset of the 'wmake' special targets:
  all               All subdirectories, uses any Allwclean or Allclean
                    files if they exist
  exe | lib | libo | libso
                    Clean Make, any *.dep files and lnInclude directories
  empty             Remove empty sub-directories for the requested dir.
                    If executed in the main project directory, it will also
                    remove deprecated object directories and respective binaries
                    that refer to no-longer-existing source code.

USAGE
    exit 1
}

#------------------------------------------------------------------------------
# Parse arguments and options
#------------------------------------------------------------------------------

unset dir targetType
MakeDir=Make

while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help*)
        usage
        ;;
    -a | -all | all)
        targetType=all
        ;;
    -s | -silent)    # Ignored - for compatibility with wmake
        ;;
    -*)
        usage "unknown option: '$1'"
        ;;
    *)
        break
        ;;
    esac
    shift
done

#------------------------------------------------------------------------------
# Check arguments and change to the directory in which to run wclean.
# The variables 'targetType' and 'MakeDir' are considered global
#------------------------------------------------------------------------------

if [ $# -ge 1 ]
then
    if [ -d "$1" ]
    then
        dir="${1%/}"
    elif [ -f "$1" ]
    then
        dir="${1%/*}"
        : ${dir:=.}
    else
        targetType=$1
    fi

    # Specified directory name:
    [ $# -ge 2 ] && dir="${2%/}"

    # Specified alternative name for the Make sub-directory:
    [ $# -ge 3 ] && MakeDir="${3%/}"

    if [ -n "$dir" ]
    then
        cd $dir 2>/dev/null || {
            echo "$Script error: could not change to directory '$dir'" 1>&2
            exit 1
        }
    fi

    # Print command, trim off leading './' for readability
    echo "$Script $targetType${targetType:+ }${dir#./}"
fi


#------------------------------------------------------------------------------
# If target not specified search up the directory tree for the Make
# sub-directory, check the existence of the 'files' file and clean there if
# present
# ------------------------------------------------------------------------------

[ -n "$targetType" ] || cdSource


#------------------------------------------------------------------------------
# Remove empty sub-directories and exit
#------------------------------------------------------------------------------

if [ "$targetType" = empty ]
then
    # First pass: clean up empty source code directories
    echo "Removing empty directories..."

    # Get sub-directories avoiding particular directories
    for d in $(find . -mindepth 1 -maxdepth 1 \
                      -name .git -prune -o -type d -print)
    do
        echo "    searching: ${d#./}"
        find $d -depth -empty -type d -delete -print
    done

    # Second pass: clean up object directories with WM_PROJECT_DIR that don't
    # have respective source code folders, along with the respective binaries
    if [ "$(expandPath $PWD)" = "$(expandPath $WM_PROJECT_DIR)" ]
    then
        objectsDir=$(findObjectDir $PWD 2>/dev/null) || exit 1 # Fatal

        if [ -d "$objectsDir" ]
        then
            echo "    Removing redundant object directories in $objectsDir"

            find $objectsDir -name 'variables' -print | \
            while read variablesFile
            do
                # Hack'ish way of getting the original source code path
                depFile=$(dirname $variablesFile)
                sourceFile=$(depToSource $depFile)

                # Check if the original source code directory exists
                if [ ! -r "$sourceFile" ]
                then
                    # Delete the respective binary first
                    binaryFile=$(cat $variablesFile |
                                grep -e '^ *\(EXE\|LIB\) *= *' )

                    # Catch all file extension (o,a,so,?+) for libraries
                    if echo $binaryFile | grep -qe '^ *LIB *= *'
                    then
                        binaryFile="${binaryFile}.*"
                    fi

                    # Isolate path and translate environment variables
                    binaryFile=$(echo $binaryFile | \
                                 sed -e 's/^ *\(EXE\|LIB\) *= *//' \
                                     -e 's/(/{/g' -e 's/)/}/g' )

                    # Expand environment variables for path
                    binaryFile=$(eval echo $binaryFile)

                    # Verbosely remove binary file
                    if [ -n "$binaryFile" -a -e "$binaryFile" ]
                    then
                        rm -vf $binaryFile 2>/dev/null
                    fi

                    # Remove the deprecated object directory
                    rm -rvf $depFile 2>/dev/null
                fi
            done
        fi
    fi

    exit 0
fi


#------------------------------------------------------------------------------
# Recurse the directories tree
#------------------------------------------------------------------------------

if [ "$targetType" = all ]
then
    if [ -e Allwclean ]       # Consistent with Allwmake
    then
        ./Allwclean
        exit $?
    elif [ -e Allclean ]      # Often used for tutorial cases
    then
        ./Allclean
        exit $?
    fi

    # For all directories containing a 'Make' directory, or an 'Allwclean' file
    for dir in $(find . -name Allwclean -o -name Make)
    do
        echo ${dir%/*}
    done | sort | uniq | while read dir
    do
        # Use Allwclean if it exists, otherwise wclean
        if [ -e "$dir/Allwclean" ]
        then
            $dir/Allwclean
        elif [ -d "$dir/Make" ]
        then
            $0 $dir
        fi
    done
fi


#------------------------------------------------------------------------------
# Clean the 'Make' directory if present
#------------------------------------------------------------------------------

if [ -d "$MakeDir" ]
then
    objectsDir=$MakeDir/$WM_OPTIONS
    case "$PWD" in
    ("$WM_PROJECT_DIR"/*)
        buildPath=$WM_PROJECT_DIR/build/${WM_OPTIONS}
        objectsDir=$buildPath$(echo $PWD | sed s%$WM_PROJECT_DIR%% )
        ;;
    esac
    rm -rf $objectsDir 2>/dev/null
fi

#------------------------------------------------------------------------------
# Remove the lnInclude directory if present
#------------------------------------------------------------------------------

[ -d lnInclude ] && rm -rf lnInclude 2>/dev/null

exit 0 # clean exit

#------------------------------------------------------------------------------
